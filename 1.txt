Learning : Git - (MAC)
一：查看
1, 简历文档(在主目录下): mkdir gitTUT
2, 设置修改者 : git config —global user.name “yihong”
              git config —global user.email “…@qq.com”
3, 显示修改者 : git config user.name
              git config user.email
4, 初始化被管理文件夹:  git init
5, 建立文件: touch 1.txt
6, 加入文件: git add 1.txt
7, 查看状态: git status
8, 修改文件: 修改完后查看状态为 modified
9, 在modified状态后要提交: git add 1.txt
10, add之后，提交文件: git commit -m “change 1”
11, 查看被commit后的状态 git log
12, 加入所有的文件: git add . 
13, 查看两次文档的不同(unstage的状态与上一个状态的对比) git diff
14, 查看staged的状态和上一个commit的状态的区别 git diff —cached
15, 同时查看staged和unstage的状态: git diff HEAD

二：回到以前的版本
1, 改了一个版本还是属于上一个未完成版本: git commit —-amend —-no-edit
2, 从staged状态返回到modified的状态 (即：add之后没有commit)： git reset 1.txt
3, 回到上一个状态（已经commit之后): git reset —-hard HEAD
4, 回到上上一个状态（已经commit之后): git reset —-hard HEAD^      前一百状态HEAD~100
5, 使用ID号码回到某一个状态

三：回到未来
1, 可以看到每一步的变化: git reflog
2, 回到未来 git reset —ID号

四：针对单个文件回到过去
1，git checkout ID — 1.py

五：分支管理
1，查看分支图: git log —online —-graph
2, 建立一个分支: git branch dev
3, 查看当前位置: git branch
4, 转换到分支: git checkout dev(必须先回到主分支 git checkout master)
5, 删除分支： git branch -d dev
另法：用checkout建立分支 git checkout -b dev
6, merge分支: git merge —no-ff -m “keep merge info” dev
